rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    /* ========= HELPERS BASE ========= */
    function isAuth() { return request.auth != null; }
    function uid() { return request.auth.uid; }

    // Roles desde documento - CONTROL-STORE
    function controlStoreUserDocExists() {
      return isAuth() && exists(/databases/$(db)/documents/apps/control-store/users/$(uid()));
    }
    function controlStoreUserRole() {
      return isAuth() && controlStoreUserDocExists()
        ? get(/databases/$(db)/documents/apps/control-store/users/$(uid())).data.role
        : null;
    }
    
    // Roles desde documento - CONTROLD (para otras apps)
    function userDocExists() {
      return isAuth() && exists(/databases/$(db)/documents/apps/controld/users/$(uid()));
    }
    function userRole() {
      return isAuth() && userDocExists()
        ? get(/databases/$(db)/documents/apps/controld/users/$(uid())).data.role
        : null;
    }
    // Helpers para CONTROL-STORE
    function isControlStoreMaxDev() { return controlStoreUserRole() == 'maxdev'; }
    function isControlStoreAdmin()  { return controlStoreUserRole() == 'admin' || controlStoreUserRole() == 'maxdev'; }
    
    // Helpers para CONTROLD y otras apps
    function isMaxDev() { return userRole() == 'maxdev'; }
    function isAdmin()  { return userRole() == 'admin' || userRole() == 'maxdev'; }
    function isFactory(){ return userRole() == 'factory'; }
    function isBranch() { return userRole() == 'branch'; }
    function isDelivery(){return userRole() == 'delivery'; }

    // Operación y campos
    function isCreate() { return !exists(resource.path); }
    function isUpdate() { return exists(resource.path); }

    // Dueño por campo (e.g., userId/ownerId)
    function ownerIs(field) {
      return isAuth() && (
        (isCreate() && request.resource.data[field] == uid()) ||
        (isUpdate() && resource.data[field] == uid() && request.resource.data[field] == uid())
      );
    }

    // Inmutabilidad
    function unchanged(field) {
      return isUpdate() ? request.resource.data[field] == resource.data[field] : true;
    }

    // Tipos y validadores comunes
    function strBetween(field, min, max) {
      return request.resource.data[field] is string
          && request.resource.data[field].size() >= min
          && request.resource.data[field].size() <= max;
    }
    function nonEmptyString(field) {
      return request.resource.data[field] is string && request.resource.data[field].size() >= 1;
    }
    function isBool(field) { return request.resource.data[field] is bool; }
    function isInt(field) {
      return request.resource.data[field] is number
          && (request.resource.data[field] % 1) == 0;
    }
    function isTs(field) { return request.resource.data[field] is timestamp; }

    // Lectura pública por flag booleano del doc
    function publicRead(flagField) {
      return resource.data[flagField] == true;
    }

    /* ========= CONTROLBIO (link-in-bio) ========= */

    match /apps/controlbio/users/{userId} {
      allow read: if true;
      allow create: if isAuth()
        && userId == uid()
        && request.resource.data.uid == uid()
        && request.resource.data.email == request.auth.token.email
        && strBetween("username", 3, 20)
        && strBetween("displayName", 1, 50);
      allow update: if isAuth()
        && userId == uid()
        && unchanged("uid")
        && unchanged("email")
        && strBetween("username", 3, 20)
        && strBetween("displayName", 1, 50);
      allow delete: if isAuth() && userId == uid();
    }

    match /apps/controlbio/links/{linkId} {
      allow read: if publicRead("isActive") || (isAuth() && resource.data.userId == uid());

      allow create: if ownerIs("userId")
        && strBetween("title", 1, 100)
        && nonEmptyString("url")
        && isInt("order")
        && isBool("isActive")
        && isTs("createdAt")
        && isTs("updatedAt");

      allow update: if ownerIs("userId")
        && unchanged("userId")
        && strBetween("title", 1, 100)
        && nonEmptyString("url")
        && isInt("order")
        && isBool("isActive")
        && unchanged("createdAt")
        && isTs("updatedAt");

      allow delete: if ownerIs("userId");
    }

    match /apps/controlbio/sections/{sectionId} {
      allow read: if publicRead("isActive") || (isAuth() && resource.data.userId == uid());

      allow create: if ownerIs("userId")
        && strBetween("title", 1, 50)
        && isInt("order")
        && isBool("isActive")
        && isTs("createdAt")
        && isTs("updatedAt");

      allow update: if ownerIs("userId")
        && unchanged("userId")
        && strBetween("title", 1, 50)
        && isInt("order")
        && isBool("isActive")
        && unchanged("createdAt")
        && isTs("updatedAt");

      allow delete: if ownerIs("userId");
    }

    match /apps/controlbio/carousels/{carouselId} {
      allow read: if publicRead("isPublic") || (isAuth() && resource.data.userId == uid());

      allow create: if ownerIs("userId")
        && strBetween("name", 1, 100)
        && request.resource.data.type in ['horizontal','grid','masonry','card']
        && request.resource.data.imageFileIds is list
        && isInt("order")
        && isBool("isActive")
        && isBool("isPublic")
        && isTs("createdAt")
        && isTs("updatedAt");

      allow update: if ownerIs("userId")
        && unchanged("userId")
        && strBetween("name", 1, 100)
        && request.resource.data.type in ['horizontal','grid','masonry','card']
        && request.resource.data.imageFileIds is list
        && isInt("order")
        && isBool("isActive")
        && isBool("isPublic")
        && unchanged("createdAt")
        && isTs("updatedAt");

      allow delete: if ownerIs("userId");
    }

    // Galerías de controlbio
    match /apps/controlbio/galleries/{galleryId} {
      allow read: if publicRead("isActive") || (isAuth() && resource.data.userId == uid());

      allow create: if ownerIs("userId")
        && strBetween("name", 1, 100)
        && request.resource.data.layout in ['grid','masonry','carousel']
        && request.resource.data.imageFileIds is list
        && isInt("order")
        && isBool("isActive")
        && isTs("createdAt")
        && isTs("updatedAt");

      allow update: if ownerIs("userId")
        && unchanged("userId")
        && strBetween("name", 1, 100)
        && request.resource.data.layout in ['grid','masonry','carousel']
        && request.resource.data.imageFileIds is list
        && isInt("order")
        && isBool("isActive")
        && unchanged("createdAt")
        && isTs("updatedAt");

      allow delete: if ownerIs("userId");
    }

    /* ========= CONTROL-STORE (NUEVO - CON CATEGORÍAS) ========= */

    // Helper para obtener ownerId de una tienda
    function storeOwnerId(storeId) {
      return get(/databases/$(db)/documents/apps/control-store/stores/$(storeId)).data.ownerId;
    }

    // Usuario de control-store
    match /apps/control-store/users/{userId} {
      // Crear documento - cualquier usuario autenticado puede crear su propio documento
      allow create: if isAuth() 
        && userId == uid()
        && request.resource.data.email != null
        && request.resource.data.displayName != null;
      
      // Leer - el propio usuario o admins
      allow read: if isAuth() && (userId == uid() || isControlStoreAdmin());
      
      // Actualizar - solo el propio usuario
      allow update: if isAuth() && userId == uid();
      
      // Eliminar - solo el propio usuario
      allow delete: if isAuth() && userId == uid();
    }

    // Tiendas
    match /apps/control-store/stores/{storeId} {
      // Lectura pública para ver catálogos
      allow read: if true;
      
      // Crear tienda - verificar que el ownerId sea el usuario actual
      allow create: if isAuth() 
        && request.resource.data.ownerId == uid()
        && request.resource.data.ownerEmail != null
        && request.resource.data.slug != null
        && request.resource.data.name != null;
      
      // Actualizar tienda - solo el owner O admin/maxdev
      // También permitir actualización durante transferencia (cambio de dueño)
      allow update: if isAuth() && (
        (resource.data.ownerId == uid() && request.resource.data.ownerId == resource.data.ownerId) ||
        (isControlStoreAdmin() || isControlStoreMaxDev()) ||
        // Permitir cambio de dueño durante transferencia
        (request.resource.data.ownerId == uid() && request.resource.data.ownerEmail != null)
      );
      
      // Eliminar tienda - solo el owner O admin/maxdev
      allow delete: if isAuth() && (
        resource.data.ownerId == uid() ||
        (isControlStoreAdmin() || isControlStoreMaxDev())
      );

      // Productos de cada tienda
      match /products/{productId} {
        // Lectura pública
        allow read: if true;
        
        // Crear producto - solo el owner de la tienda
        allow create: if isAuth() && storeOwnerId(storeId) == uid();
        
        // Actualizar/eliminar - solo el owner de la tienda
        allow update, delete: if isAuth() && storeOwnerId(storeId) == uid();
      }

      // Categorías de cada tienda
      match /categories/{categoryId} {
        // Lectura pública
        allow read: if true;
        
        // Crear categoría - solo el owner de la tienda
        allow create: if isAuth() && storeOwnerId(storeId) == uid();
        
        // Actualizar/eliminar - solo el owner de la tienda
        allow update, delete: if isAuth() && storeOwnerId(storeId) == uid();
      }
    }

    // Invitaciones
    match /apps/control-store/invitations/{invitationId} {
      // Lectura pública para validar tokens
      allow read: if true;
      
      // Crear invitación - usuarios autenticados
      allow create: if isAuth();
      
      // Actualizar invitación - para marcar como usada
      allow update: if isAuth() && !resource.data.used;
      
      // Eliminar - desde backend
      allow delete: if false;
    }

    // Transferencias de tiendas
    match /apps/control-store/transfers/{transferId} {
      // Lectura pública para validar tokens
      allow read: if true;
      
      // Crear transferencia - solo admins/maxdev de control-store
      allow create: if isAuth() && (isControlStoreAdmin() || isControlStoreMaxDev());
      
      // Actualizar transferencia - cualquier usuario autenticado puede marcar como usada cuando acepta
      // Solo se permite marcar como usada si no estaba usada previamente
      allow update: if isAuth() && !resource.data.used;
      
      // Eliminar - solo admins/maxdev de control-store
      allow delete: if isAuth() && (isControlStoreAdmin() || isControlStoreMaxDev());
    }

    /* ========= CONTROLD (remitos) ========= */
    match /apps/controld {
      match /users/{userId} {
        allow read: if isAuth();
        allow create, update: if isAuth();
        allow delete: if isAdmin();
      }

      match /branches/{branchId} {
        allow read: if isAuth();
        allow create, update, delete: if isAdmin();
      }

      match /products/{productId} {
        allow read: if isAuth();
        allow create: if isAdmin() || isFactory();
        allow update, delete: if isAdmin();
      }

      match /orders/{orderId} {
        allow read, create, update: if isAuth();
        allow delete: if isAdmin();
      }

      match /deliveryNotes/{noteId} {
        allow read, create, update: if isAuth();
        allow delete: if isAdmin();
      }

      match /templates/{templateId} {
        allow read, create, update, delete: if isAuth();
      }

      match /remit-metadata/{metadataId} {
        allow read, create, update: if isAuth();
        allow delete: if isAdmin();
      }

      match /replacementQueues/{queueId} {
        allow read, create, update: if isAuth();
        allow delete: if isAdmin();
      }
    }

    /* ========= CONTROLGASTOS ========= */

    match /apps/controlgastos/users/{userId}/{collection=**}/{docId} {
      allow read, write: if isAuth() && userId == uid();
    }
    
    match /apps/controlgastos/categories/{categoryId} {
      allow read, write: if isAuth();
    }
    
    match /expenses/{id} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    match /payments/{id} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    match /invoices/{id} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }

    /* ========= CONTROLFILE ========= */
    
    // Archivos
    match /files/{fileId} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    // Carpetas
    match /folders/{folderId} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    // Sesiones de upload
    match /uploadSessions/{sessionId} {
      allow create: if isAuth() && request.resource.data.uid == uid();
      allow read, update, delete: if isAuth() && resource.data.uid == uid();
    }
    
    // Compartir archivos
    match /shares/{shareId} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read: if resource.data.isPublic == true || (isAuth() && resource.data.userId == uid());
      allow update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    // Papelera
    match /trash/{trashId} {
      allow create: if isAuth() && request.resource.data.userId == uid();
      allow read, update, delete: if isAuth() && resource.data.userId == uid();
    }
    
    // Usuarios
    match /users/{userId} {
      allow create: if isAuth() && userId == uid();
      allow read, update, delete: if isAuth() && userId == uid();
    }

    /* ========= CONTROLCICLO ========= */
    match /apps/controlciclo/users/{userId}/{document=**} {
      allow read, write: if isAuth() && userId == uid();
    }

    /* ========= AUDITORÍA ========= */
    match /audit/{auditId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    /* ========= DENY POR DEFECTO ========= */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

